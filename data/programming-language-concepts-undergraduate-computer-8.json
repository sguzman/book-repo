{"categories":["Computer Science","Engineering","Programming"],"desc":" Programming Language Concepts uses a functional programming language (F#) as the metalanguage in which to present all concepts and examples, and thus has an operational flavour, enabling practical experiments and exercises. It includes basic concepts such as abstract syntax, interpretation, stack machines, compilation, type checking, and garbage collection techniques, as well as the more advanced topics on polymorphic types, type inference using unification, co- and contravariant types, continuations, and backwards code generation with on-the-fly peephole optimization. Programming Language Concepts covers practical construction of lexers and parsers, but not regular expressions, automata and grammars, which are well covered elsewhere. It throws light on the design and technology of Java and C# to strengthen studentsâ€™ understanding of these widely used languages. The examples present several interpreters and compilers for toy languages, including a compiler for a small but usable subset of C, several abstract machines, a garbage collector, and ML-style polymorphic type inference. Each chapter has exercises based on such examples.","details":{"authors":null,"format":"pdf","isbn-10":"1447141555","isbn-13":"978-1447141556","pages":"278 pages","publication date":"June 12, 2012","publisher":"Springer","size":"1.56Mb"},"img":"http://23.95.221.108/covers/33/333d4ae2820a164e93bd15f0f247f460.jpg","link":"https://rapidhosting.info/files/haz","title":"Programming Language Concepts (Undergraduate Topics in Computer Science)"}