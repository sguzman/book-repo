{"categories":["Engineering"],"desc":" The advent of multicore processors has renewed interest in the idea of incorporating transactions into the programming model used to write parallel programs. This approach, known as transactional memory, offers an alternative, and hopefully better, way to coordinate concurrent threads. The ACI (atomicity, consistency, isolation) properties of transactions provide a foundation to ensure that concurrent reads and writes of shared data do not produce inconsistent or incorrect results. At a higher level, a computation wrapped in a transaction executes atomically â€“ either it completes successfully and commits its result in its entirety or it aborts. In addition, isolation ensures the transaction produces the same result as if no other transactions were executing concurrently. Although transactions are not a parallel programming panacea, they shift much of the burden of synchronizing and coordinating parallel computations from a programmer to a compiler, to a language runtime system, or to hardware. The challenge for the system implementers is to build an efficient transactional memory infrastructure. This book presents an overview of the state of the art in the design and implementation of transactional memory systems, as of early spring 2010. Table of Contents: Introduction / Basic Transactions / Building on Basic Transactions / Software Transactional Memory / Hardware-Supported Transactional Memory / Conclusions","details":{"authors":"Tim Harris, James Larus, Ravi Rajwar, Mark Hill","format":"pdf","isbn-10":"1608452352","isbn-13":"978-1608452354","pages":"264 pages","publication date":"June 2, 2010","publisher":"Morgan and Claypool Publishers","size":"1.00Mb"},"img":"http://23.95.221.108/covers/6d/6dcac980b3ecdad5405736f6a75df6e5.jpg","link":"https://rapidhosting.info/files/ez2","title":"Transactional Memory, 2nd Edition (Synthesis Lectures on Computer Architecture)"}